#! /usr/bin/perl

sub print_banner {

	print STDERR "\n\n=========== Effect size estimation by PTWAS ========\n\n";
}


sub print_usage {
	print STDERR "\nPTWAS_est -d input\_file  [-t cpip_threshold]  [-n gene\_name] [--cluster_info]\n\n"; 
}


print_banner();


$cpip_thresh = 0.5;
$cpip_thresh_undef = 1;
$infile = "";
$grp_count = 0;
$print_grp = 0;

for ($i=0;$i<=$#ARGV;$i++){
    if($ARGV[$i] eq "-d"){
        $infile = $ARGV[++$i];
        next;
    }

    if($ARGV[$i] eq "-t"){
        $cpip_thresh = $ARGV[++$i];
	$cpip_thresh_undef = 0;
        next;
    }

    if($ARGV[$i] eq "-n"){
        $name = $ARGV[++$i];
        next;
    }

    if($ARGV[$i] eq "--group" || $ARGV[$i] eq "--cluster_info"){
        $print_grp = 1;
        next;
    }


    print STDERR "Error: unknown command line parameter $ARGV[$i]\n";
    print_usage();
    exit(1);

}

if (! -r $infile){
    print STDERR "Error: cannot read input data file $infile\n";
    exit(1);
}

if( $cpip_thresh_undef==1){
    print STDERR "* Use default signal PIP threshold $cpip_thresh\n\n";
}else{
    print STDERR "* Use user-specified signal PIP threshold $cpip_thresh\n\n";
}




if($print_grp){
    printf "#cluster_id\tSPIP\tmember_snp\tcluster_estimate\tstd_err\n";
}





open FILE, "$infile";
while(<FILE>){

    next if $_ !~ /\d/;

    my @data = split /\s+/, $_;
    shift @data until $data[0]=~/^\S/;

    if(!defined($cluster{$data[1]})){

        $cluster{$data[1]} = { snp => [],
            pip=> [],
            b_xz =>[],
            b_yz =>[],
            se_xz =>[],
            se_yz =>[] };
    }

    push @{$cluster{$data[1]}->{snp}}, $data[0];

    $tpip += $data[2];

    push @{$cluster{$data[1]}->{pip}}, $data[2];
    push @{$cluster{$data[1]}->{b_xz}}, $data[3]/$data[4];
    push @{$cluster{$data[1]}->{se_xz}}, 1;
    push @{$cluster{$data[1]}->{b_yz}}, $data[5];
    push @{$cluster{$data[1]}->{se_yz}}, $data[6];

}


foreach $k (sort {$a<=>$b} keys %cluster){
    $grp_count++; 
    my @pip = @{$cluster{$k}->{pip}};

    my $m = scalar(@pip);
    my $spip = 0;
    foreach $p ( @{$cluster{$k}->{pip}}){
        $spip += $p;
    }
    next if $spip < $cpip_thresh;


    my @beta_xz = @{$cluster{$k}->{b_xz}};
    my @beta_yz = @{$cluster{$k}->{b_yz}};
    my @se_yz = @{$cluster{$k}->{se_yz}};
    my @se_xz = @{$cluster{$k}->{se_xz}};

    my @beta_yx;
    my @se_yx;
    for $i (0..$#pip){
        push @beta_yx, $beta_yz[$i]/$beta_xz[$i];
        push @se_yx, sqrt($se_yz[$i]**2/$beta_xz[$i]**2 + $beta_yz[$i]**2*$se_xz[$i]**2/$beta_xz[$i]**4);
    }


    my $grp_beta = 0;
    my $grp_se = 0;
    for $i (0..$#pip){
        $grp_beta += $beta_yx[$i]*$pip[$i]/$spip;
        $grp_se += ($beta_yx[$i]**2 + $se_yx[$i]**2)*$pip[$i]/$spip;
    }

    $grp_se = sqrt(($grp_se - $grp_beta**2));
    if($print_grp){
        printf "%d\t%7.3f\t\t%d\t\t%7.3f\t%7.3f\n",$grp_count, $spip,scalar(@pip), $grp_beta, $grp_se;
    }
    
    push @wv, 1/($grp_se**2);

    push @est, $grp_beta;
    push @se, $grp_se;
}

if(scalar(@est) == 0){

	print STDERR "No signal cluster satisfies CPIP threshold, exit due to lack of strong instruments for estimation\n\n";
	exit(2);
}

if($print_grp){
    printf "\n\n";
}


my $meta = 0;
my $Q = 0;
my $se_meta = 0;

for $i (0..$#wv){
    $meta += $wv[$i]*$est[$i];
    $sum_w += $wv[$i];
}


$meta = $meta/$sum_w;
$se_meta = sqrt(1/$sum_w);

for $i (0..$#wv){
    $Q += $wv[$i]*($est[$i]- $meta)**2;
}

$I2 = 0;
$I2 = ($Q-$#est)/$Q if $Q > 1e-3;
$I2 =0 if $I2 <0;


$name = "NA" if !defined($name);
printf  "#Gene\tnum_cluster\tcum_pip\tnum_instruments\testimated_eff\tstd_err\tI^2\n";
printf  "$name\t%d\t%7.3f\t%d\t%7.3f\t%7.3f\t%7.3f\n", scalar(keys %cluster), $tpip, $#est + 1, $meta, $se_meta, $I2;




